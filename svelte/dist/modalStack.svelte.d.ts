export function useModalStack(): {
    setComponentResolver: (resolver: any) => void;
    getBaseUrl: () => any;
    setBaseUrl: (url: any) => any;
    stack: any[];
    localModals: {};
    push: typeof push;
    pushFromResponseData: typeof pushFromResponseData;
    length: () => number;
    closeAll: () => void;
    reset: () => number;
    visit: typeof visit;
    visitModal: typeof visitModal;
    registerLocalModal: typeof registerLocalModal;
    removeLocalModal: (name: any) => void;
    onModalOnBase: (modalOnBase: any) => void;
};
export function initFromPageProps(pageProps: any): void;
export const modalPropNames: string[];
export function renderApp(el: any, App: any, pageProps: any): void;
declare function push(component: any, response: any, config: any, onClose: any, afterLeave: any): Modal;
declare function pushFromResponseData(responseData: any, config?: {}, onClose?: any, onAfterLeave?: any): any;
declare function visit(href: any, method: any, payload?: {}, headers?: {}, config?: {}, onClose?: any, onAfterLeave?: any, queryStringArrayFormat?: string, useBrowserHistory?: boolean): Promise<any>;
declare function visitModal(url: any, options?: {}): Promise<any>;
declare function registerLocalModal(name: any, callback: any): void;
declare class Modal {
    constructor(component: any, response: any, config: any, onClose: any, afterLeave: any);
    id: any;
    isOpen: boolean;
    shouldRender: boolean;
    listeners: {};
    component: any;
    props: any;
    response: any;
    config: any;
    onCloseCallback: any;
    afterLeaveCallback: any;
    index: number;
    onTopOfStack: boolean;
    getParentModal: () => any;
    getChildModal: () => any;
    show: () => void;
    close: () => void;
    setOpen: (open: any) => void;
    afterLeave: () => void;
    on: (event: any, callback: any) => void;
    off: (event: any, callback: any) => void;
    emit: (event: any, ...args: any[]) => void;
    registerEventListenersFromProps: (props: any) => () => void;
    reload: (options?: {}) => void;
    updateProps: (props: any) => void;
}
export {};
